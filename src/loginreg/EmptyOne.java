/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginreg;

import com.mysql.cj.protocol.Resultset;
import java.awt.CardLayout;
import java.sql.*;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
//import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
//import java.sql.DriverManager;
//import java.sql.ResultSet;
//import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author natalramirez
 */
public class EmptyOne extends javax.swing.JFrame {
    private static Connection con;
    private static String dburl = "jdbc:mysql://localhost:3306/finals";
    private static String dbusername = "root";
//    private static String dbpassword = "root";
    private static String dbpassword = "AdDU2202301476234";
    private static int newPurchaseOrderId = 0;
    /**
     * Creates new form EmptyOne
     */
    public EmptyOne() {
        initComponents();
        loadComboBox();
        loadComboBox2();
        loadComboBox3();
        loadComboBox3("");
//        loadPurchaseOrdersTable();
        loadComboBox4();
        loadPurchasId();
        loadCategoriesItems();
        loadSupOrders();
        // Initially show panel
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbSupplierPurch = new javax.swing.JComboBox<>();
        purchaseUnitQuantity = new javax.swing.JTextField();
        cmbItemPurchase = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        notesPurchase = new javax.swing.JTextPane();
        purchaseQuantity = new javax.swing.JTextField();
        cmbPurOrdId = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        AddOrderbtn = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        totalAmountPurchase = new javax.swing.JTextField();
        clearPurchase = new javax.swing.JButton();
        AddItemPurchbtn = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        notestxtTrans = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        TransactbtnTrans = new javax.swing.JButton();
        updatebtnTrans = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        deletebtnTrans = new javax.swing.JButton();
        quantityTranstxt = new javax.swing.JTextField();
        cmbTrans = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cmbTransType = new javax.swing.JComboBox<>();
        CreatebtnCat1 = new javax.swing.JButton();
        delbtnCat1 = new javax.swing.JButton();
        upbtnCat1 = new javax.swing.JButton();
        readbtnCat1 = new javax.swing.JButton();
        cmbCat1 = new javax.swing.JComboBox<>();
        Categorytxtfield1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        CreatebtnCat2 = new javax.swing.JButton();
        delbtnCat2 = new javax.swing.JButton();
        upbtnCat2 = new javax.swing.JButton();
        readbtnCat2 = new javax.swing.JButton();
        cmbCat2 = new javax.swing.JComboBox<>();
        Categorytxtfield2 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        Categories = new javax.swing.JPanel();
        CreatebtnCat = new javax.swing.JButton();
        delbtnCat = new javax.swing.JButton();
        upbtnCat = new javax.swing.JButton();
        readbtnCat = new javax.swing.JButton();
        cmbCat = new javax.swing.JComboBox<>();
        Categorytxtfield = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Suppliers = new javax.swing.JPanel();
        CreatebtnSup = new javax.swing.JButton();
        upbtnSup = new javax.swing.JButton();
        readbtnSup = new javax.swing.JButton();
        cmbSup = new javax.swing.JComboBox<>();
        Suppliertxtfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Suppliertbl = new javax.swing.JTable();
        Contacttxtfield = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Items = new javax.swing.JPanel();
        ItemtxtIt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        DesctxtIt = new javax.swing.JTextArea();
        cmbItem = new javax.swing.JComboBox<>();
        pricetxtIt = new javax.swing.JTextField();
        ReordertxtIt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        CreatebtnIt = new javax.swing.JButton();
        UpdatebtnIt = new javax.swing.JButton();
        DeletebtnIt = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Itemtbl = new javax.swing.JTable();
        cmbSorterCat = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        Transactions = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TransTable = new javax.swing.JTable();
        PurchaseOrders = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        notesPurchase1 = new javax.swing.JTextPane();
        AddItemPurchbtn1 = new javax.swing.JButton();
        purchaseQuantity1 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        totalAmountPurchase1 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        cmbSupplierPurch1 = new javax.swing.JComboBox<>();
        purchaseUnitQuantity1 = new javax.swing.JTextField();
        cmbItemPurchase1 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        newPurchase1 = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtOrderID = new javax.swing.JTextField();
        savebtn = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        PurchaseOrderTable = new javax.swing.JTable();
        jLabel32 = new javax.swing.JLabel();
        cmbSupplierFilter = new javax.swing.JComboBox<>();
        Categoriesbtn = new javax.swing.JButton();
        Suppliersbtn = new javax.swing.JButton();
        Itemsbtn = new javax.swing.JButton();
        Transactionsbtn = new javax.swing.JButton();
        Purchasebtn2 = new javax.swing.JButton();

        cmbSupplierPurch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierPurchActionPerformed(evt);
            }
        });

        purchaseUnitQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseUnitQuantityActionPerformed(evt);
            }
        });

        cmbItemPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemPurchaseActionPerformed(evt);
            }
        });

        jLabel18.setText("Unit Price:");

        jScrollPane6.setViewportView(notesPurchase);

        purchaseQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseQuantityActionPerformed(evt);
            }
        });

        cmbPurOrdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPurOrdIdActionPerformed(evt);
            }
        });

        jLabel8.setText("Quantity:");

        jLabel19.setText("Purchase Order ID:");

        jLabel11.setText("Item:");

        AddOrderbtn.setText("Add Order");
        AddOrderbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddOrderbtnActionPerformed(evt);
            }
        });

        jLabel15.setText("Supplier:");

        jLabel16.setText("Notes:");

        jLabel17.setText("Total Amount:");

        totalAmountPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmountPurchaseActionPerformed(evt);
            }
        });

        clearPurchase.setText("Clear");
        clearPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPurchaseActionPerformed(evt);
            }
        });

        AddItemPurchbtn.setText("Add Item");
        AddItemPurchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemPurchbtnActionPerformed(evt);
            }
        });

        jLabel13.setText("Transaction Type");

        notestxtTrans.setColumns(20);
        notestxtTrans.setRows(5);
        jScrollPane4.setViewportView(notestxtTrans);

        jLabel14.setText("Notes");

        TransactbtnTrans.setText("Transact");
        TransactbtnTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransactbtnTransActionPerformed(evt);
            }
        });

        updatebtnTrans.setText("Update");
        updatebtnTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnTransActionPerformed(evt);
            }
        });

        jLabel10.setText("Item:");

        deletebtnTrans.setText("Delete");
        deletebtnTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnTransActionPerformed(evt);
            }
        });

        quantityTranstxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityTranstxtActionPerformed(evt);
            }
        });

        cmbTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTransActionPerformed(evt);
            }
        });

        jLabel12.setText("Quantity");

        cmbTransType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Stock In", "Stock Out" }));

        CreatebtnCat1.setText("Create");

        delbtnCat1.setText("Delete");

        upbtnCat1.setText("Update");

        readbtnCat1.setText("Read");

        jLabel20.setText("Category Name");

        CreatebtnCat2.setText("Create");

        delbtnCat2.setText("Delete");

        upbtnCat2.setText("Update");

        readbtnCat2.setText("Read");

        jLabel21.setText("Category Name");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(255, 209, 220));
        mainPanel.setForeground(new java.awt.Color(153, 255, 255));
        mainPanel.setLayout(new java.awt.CardLayout());

        Categories.setForeground(new java.awt.Color(204, 255, 153));

        CreatebtnCat.setText("Create");
        CreatebtnCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatebtnCatActionPerformed(evt);
            }
        });

        delbtnCat.setText("Delete");
        delbtnCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delbtnCatActionPerformed(evt);
            }
        });

        upbtnCat.setText("Update");
        upbtnCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upbtnCatActionPerformed(evt);
            }
        });

        readbtnCat.setText("Read");
        readbtnCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readbtnCatActionPerformed(evt);
            }
        });

        cmbCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCatActionPerformed(evt);
            }
        });

        Categorytxtfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategorytxtfieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Category Name");

        javax.swing.GroupLayout CategoriesLayout = new javax.swing.GroupLayout(Categories);
        Categories.setLayout(CategoriesLayout);
        CategoriesLayout.setHorizontalGroup(
            CategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CategoriesLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(CategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(delbtnCat)
                    .addComponent(CreatebtnCat)
                    .addComponent(upbtnCat)
                    .addGroup(CategoriesLayout.createSequentialGroup()
                        .addComponent(cmbCat, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readbtnCat))
                    .addComponent(jLabel1)
                    .addComponent(Categorytxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(743, Short.MAX_VALUE))
        );
        CategoriesLayout.setVerticalGroup(
            CategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CategoriesLayout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Categorytxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CreatebtnCat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delbtnCat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(upbtnCat)
                .addGap(18, 18, 18)
                .addGroup(CategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readbtnCat)
                    .addComponent(cmbCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(209, Short.MAX_VALUE))
        );

        mainPanel.add(Categories, "Categories");

        CreatebtnSup.setText("Create");
        CreatebtnSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatebtnSupActionPerformed(evt);
            }
        });

        upbtnSup.setText("Update");
        upbtnSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upbtnSupActionPerformed(evt);
            }
        });

        readbtnSup.setText("Read");
        readbtnSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readbtnSupActionPerformed(evt);
            }
        });

        cmbSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupActionPerformed(evt);
            }
        });

        Suppliertxtfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuppliertxtfieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Supplier:");

        Suppliertbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Supplier", "Contact Information"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Suppliertbl);

        Contacttxtfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContacttxtfieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Contact Information:");

        javax.swing.GroupLayout SuppliersLayout = new javax.swing.GroupLayout(Suppliers);
        Suppliers.setLayout(SuppliersLayout);
        SuppliersLayout.setHorizontalGroup(
            SuppliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SuppliersLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(SuppliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SuppliersLayout.createSequentialGroup()
                        .addGroup(SuppliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(upbtnSup)
                            .addComponent(CreatebtnSup)
                            .addGroup(SuppliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(Suppliertxtfield, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbSup, javax.swing.GroupLayout.Alignment.LEADING, 0, 146, Short.MAX_VALUE))
                            .addComponent(readbtnSup))
                        .addGap(86, 86, 86))
                    .addGroup(SuppliersLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 121, Short.MAX_VALUE))
                    .addGroup(SuppliersLayout.createSequentialGroup()
                        .addComponent(Contacttxtfield)
                        .addGap(35, 35, 35)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(157, 157, 157))
        );
        SuppliersLayout.setVerticalGroup(
            SuppliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SuppliersLayout.createSequentialGroup()
                .addGroup(SuppliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SuppliersLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Suppliertxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(7, 7, 7)
                        .addComponent(Contacttxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(CreatebtnSup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(upbtnSup)
                        .addGap(45, 45, 45)
                        .addComponent(cmbSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(readbtnSup))
                    .addGroup(SuppliersLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(113, Short.MAX_VALUE))
        );

        mainPanel.add(Suppliers, "Suppliers");

        ItemtxtIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemtxtItActionPerformed(evt);
            }
        });

        DesctxtIt.setColumns(20);
        DesctxtIt.setRows(5);
        jScrollPane2.setViewportView(DesctxtIt);

        cmbItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemActionPerformed(evt);
            }
        });

        pricetxtIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricetxtItActionPerformed(evt);
            }
        });

        jLabel4.setText("Item Name");

        jLabel5.setText("Description:");

        jLabel6.setText("Category");

        jLabel7.setText("Unit Price:");

        jLabel9.setText("Reorder Level");

        CreatebtnIt.setText("Add Item");
        CreatebtnIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatebtnItActionPerformed(evt);
            }
        });

        UpdatebtnIt.setText("Update");
        UpdatebtnIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatebtnItActionPerformed(evt);
            }
        });

        DeletebtnIt.setText("Delete");
        DeletebtnIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebtnItActionPerformed(evt);
            }
        });

        Itemtbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item", "Description", "Category", "Unit Price", "Quantity", "Reorder Level"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Itemtbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemtblMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(Itemtbl);

        cmbSorterCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 - All" }));
        cmbSorterCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSorterCatActionPerformed(evt);
            }
        });

        jLabel31.setText("Filter by Category:");

        javax.swing.GroupLayout ItemsLayout = new javax.swing.GroupLayout(Items);
        Items.setLayout(ItemsLayout);
        ItemsLayout.setHorizontalGroup(
            ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemsLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(DeletebtnIt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdatebtnIt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CreatebtnIt, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ItemsLayout.createSequentialGroup()
                        .addComponent(ReordertxtIt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(pricetxtIt, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ItemsLayout.createSequentialGroup()
                        .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ItemtxtIt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemsLayout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSorterCat, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80))
        );
        ItemsLayout.setVerticalGroup(
            ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemsLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSorterCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31))
                .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ItemsLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(ItemsLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemtxtIt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ItemsLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pricetxtIt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ItemsLayout.createSequentialGroup()
                                .addGroup(ItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel7))
                                .addGap(7, 7, 7)
                                .addComponent(ReordertxtIt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(CreatebtnIt)
                        .addGap(18, 18, 18)
                        .addComponent(UpdatebtnIt)
                        .addGap(31, 31, 31)
                        .addComponent(DeletebtnIt)))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        mainPanel.add(Items, "Items");

        TransTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        //{
            //    public boolean isCellEditable(int row, int column) {
                //                return false;
                //}
            //}
        TransTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TransTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(TransTable);

        javax.swing.GroupLayout TransactionsLayout = new javax.swing.GroupLayout(Transactions);
        Transactions.setLayout(TransactionsLayout);
        TransactionsLayout.setHorizontalGroup(
            TransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransactionsLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 819, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(115, Short.MAX_VALUE))
        );
        TransactionsLayout.setVerticalGroup(
            TransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransactionsLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        mainPanel.add(Transactions, "Transactions");

        PurchaseOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PurchaseOrdersMouseClicked(evt);
            }
        });

        jLabel22.setText("Unit Price:");

        jScrollPane7.setViewportView(notesPurchase1);

        AddItemPurchbtn1.setText("Calculate");
        AddItemPurchbtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemPurchbtn1ActionPerformed(evt);
            }
        });

        purchaseQuantity1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseQuantity1ActionPerformed(evt);
            }
        });

        jLabel24.setText("Quantity:");

        jLabel25.setText("Item:");

        jLabel26.setText("Supplier:");

        jLabel27.setText("Notes:");

        totalAmountPurchase1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmountPurchase1ActionPerformed(evt);
            }
        });

        jLabel28.setText("Total Amount:");

        cmbSupplierPurch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierPurch1ActionPerformed(evt);
            }
        });

        purchaseUnitQuantity1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseUnitQuantity1ActionPerformed(evt);
            }
        });

        cmbItemPurchase1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemPurchase1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        newPurchase1.setText("New Order ");
        newPurchase1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPurchase1ActionPerformed(evt);
            }
        });

        jLabel30.setBackground(new java.awt.Color(0, 0, 0));
        jLabel30.setText("Current Order ID:");

        txtOrderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderIDActionPerformed(evt);
            }
        });

        savebtn.setText("Save");
        savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtOrderID, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel29)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(newPurchase1))
                    .addComponent(savebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(newPurchase1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(savebtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel29)
                .addGap(216, 216, 216))
        );

        PurchaseOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(PurchaseOrderTable);

        jLabel32.setText("Filter by supplier:");

        cmbSupplierFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 - All" }));
        cmbSupplierFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PurchaseOrdersLayout = new javax.swing.GroupLayout(PurchaseOrders);
        PurchaseOrders.setLayout(PurchaseOrdersLayout);
        PurchaseOrdersLayout.setHorizontalGroup(
            PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PurchaseOrdersLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PurchaseOrdersLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PurchaseOrdersLayout.createSequentialGroup()
                                .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(cmbSupplierPurch1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(purchaseUnitQuantity1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel22))
                                .addGap(18, 18, 18)
                                .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(purchaseQuantity1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel24)))
                            .addGroup(PurchaseOrdersLayout.createSequentialGroup()
                                .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel28)
                                    .addComponent(totalAmountPurchase1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AddItemPurchbtn1))
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cmbItemPurchase1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PurchaseOrdersLayout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbSupplierFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        PurchaseOrdersLayout.setVerticalGroup(
            PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PurchaseOrdersLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSupplierFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PurchaseOrdersLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PurchaseOrdersLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbItemPurchase1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PurchaseOrdersLayout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSupplierPurch1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PurchaseOrdersLayout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(purchaseUnitQuantity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PurchaseOrdersLayout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(purchaseQuantity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PurchaseOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalAmountPurchase1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddItemPurchbtn1)))
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(PurchaseOrders, "PurchaseOrders");

        Categoriesbtn.setText("Categories");
        Categoriesbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoriesbtnActionPerformed(evt);
            }
        });

        Suppliersbtn.setText("Suppliers");
        Suppliersbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuppliersbtnActionPerformed(evt);
            }
        });

        Itemsbtn.setText("Items");
        Itemsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemsbtnActionPerformed(evt);
            }
        });

        Transactionsbtn.setText("Transactions");
        Transactionsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransactionsbtnActionPerformed(evt);
            }
        });

        Purchasebtn2.setText("Purchase");
        Purchasebtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Purchasebtn2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Transactionsbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Itemsbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Suppliersbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Categoriesbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Purchasebtn2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Categoriesbtn)
                .addGap(18, 18, 18)
                .addComponent(Suppliersbtn)
                .addGap(18, 18, 18)
                .addComponent(Itemsbtn)
                .addGap(18, 18, 18)
                .addComponent(Transactionsbtn)
                .addGap(18, 18, 18)
                .addComponent(Purchasebtn2)
                .addGap(145, 145, 145))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CategoriesbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoriesbtnActionPerformed
        // TODO add your handling code here:
    CardLayout card = (CardLayout)mainPanel.getLayout();
    card.show(mainPanel, "Categories");
    }//GEN-LAST:event_CategoriesbtnActionPerformed

    private void SuppliersbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuppliersbtnActionPerformed
    CardLayout card = (CardLayout)mainPanel.getLayout();
    card.show(mainPanel, "Suppliers");        // TODO add your handling code here:
    }//GEN-LAST:event_SuppliersbtnActionPerformed

    private void ItemsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemsbtnActionPerformed
    CardLayout card = (CardLayout)mainPanel.getLayout();
    card.show(mainPanel, "Items");       
    loadComboBox3();// TODO add your handling code here:
    }//GEN-LAST:event_ItemsbtnActionPerformed

    private void TransactionsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransactionsbtnActionPerformed
    CardLayout card = (CardLayout)mainPanel.getLayout();
    card.show(mainPanel, "Transactions");      
    
     loadComboBox4();// TODO add your handling code here:
    }//GEN-LAST:event_TransactionsbtnActionPerformed

    private void readbtnCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readbtnCatActionPerformed
        
        String orig = cmbCat.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int id = Integer.parseInt(splitted);
//        String id = splitted;
        loadCategoriesItems();
        System.out.println(id);
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement = con.createStatement();
            String query = "select * from categories where category_id = " + id;

            ResultSet sqlresult = statement.executeQuery(query);


            while(sqlresult.next()) {
                Categorytxtfield.setText(sqlresult.getString("category_name"));
            }
            

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }                           // TODO add your handling code here:
    }//GEN-LAST:event_readbtnCatActionPerformed

    private void CategorytxtfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategorytxtfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CategorytxtfieldActionPerformed

    private void CreatebtnCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatebtnCatActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();

            String category = Categorytxtfield.getText();
            


            String query = "insert into categories (category_name) values"
                    + " (\""+category+"\")";

            statement.executeUpdate(query);

            Categorytxtfield.setText("");
            cmbCat.removeAllItems();
            cmbItem.removeAllItems();
//            loadComboBox2();
            loadComboBox();
            
            
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }        // TODO add your handling code here:
        
    }//GEN-LAST:event_CreatebtnCatActionPerformed

    private void delbtnCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delbtnCatActionPerformed


        String orig = cmbCat.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int id = Integer.parseInt(splitted);

        try {
            // Load MySQL Driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish Connection
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            // Create Statement
            Statement statement = con.createStatement();

            // Drop and re-add foreign keys with ON DELETE CASCADE
            String dropItemsFK = "ALTER TABLE items DROP FOREIGN KEY fk_category_id";
            String addItemsFK = """
        ALTER TABLE items 
        ADD CONSTRAINT fk_category_id 
        FOREIGN KEY (category_id) 
        REFERENCES categories(category_id) 
        ON DELETE CASCADE
    """;

            String dropTransactionsFK = "ALTER TABLE transactions DROP FOREIGN KEY transactions_ibfk_1";
            String addTransactionsFK = """
        ALTER TABLE transactions 
        ADD CONSTRAINT transactions_ibfk_1 
        FOREIGN KEY (item_id) 
        REFERENCES items(item_id) 
        ON DELETE CASCADE
    """;
            // Drop and re-add the foreign key in purchaseorderitems with ON DELETE CASCADE
            String dropPurchaseOrderItemsFK = "ALTER TABLE purchaseorderitems DROP FOREIGN KEY purchaseorderitems_ibfk_2";
            String addPurchaseOrderItemsFK = """
    ALTER TABLE purchaseorderitems 
    ADD CONSTRAINT purchaseorderitems_ibfk_2 
    FOREIGN KEY (item_id) 
    REFERENCES items(item_id) 
    ON DELETE CASCADE
    """;
            // Update the foreign keys
            try {
                statement.executeUpdate(dropItemsFK);
            } catch (Exception ex) {
                System.out.println("Items foreign key might not exist: " + ex.getMessage());
            }
            statement.executeUpdate(addItemsFK);

            try {
                statement.executeUpdate(dropTransactionsFK);
            } catch (Exception ex) {
                System.out.println("Transactions foreign key might not exist: " + ex.getMessage());
            }
            statement.executeUpdate(addTransactionsFK);
            try {
                statement.executeUpdate(dropPurchaseOrderItemsFK);
            } catch (Exception ex) {
                System.out.println("PurchaseOrderItems foreign key might not exist: " + ex.getMessage());
            }
            statement.executeUpdate(addPurchaseOrderItemsFK);
            System.out.println("ON DELETE CASCADE applied successfully.");

            // Perform delete operation
            String query = "DELETE FROM categories WHERE category_id=" + id;
            statement.executeUpdate(query);

            // Clear fields and reload combo box
            Categorytxtfield.setText("");
            cmbCat.removeAllItems();
            loadComboBox();
            loadComboBox3();
            loadComboBox4();

            System.out.println("Category and related data deleted successfully.");
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("Failed to close connection: " + ex.getMessage());
                }
            }
        }


    }//GEN-LAST:event_delbtnCatActionPerformed

    private void upbtnCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upbtnCatActionPerformed
        String orig = cmbCat.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int id = Integer.parseInt(splitted);
//          int id = Integer.parseInt(cmbCat.getSelectedItem().toString());

        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            
            String newName = Categorytxtfield.getText();
            
            String query = "update categories set category_name= \""+newName+"\" where category_id= " +id;
            statement.executeUpdate(query);

            Categorytxtfield.setText("");
            cmbCat.removeAllItems();
            loadComboBox();

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }        // TODO add your handling code here:            // TODO add your handling code here:
    }//GEN-LAST:event_upbtnCatActionPerformed

    private void CreatebtnSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatebtnSupActionPerformed

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();

            String supplier = Suppliertxtfield.getText();
            String contact = Contacttxtfield.getText();



            String query = "insert into suppliers (supplier_name, contact_info) values"
                    + "(\""+supplier+"\", \""+contact+"\")";

            statement.executeUpdate(query);
            
            Suppliertxtfield.setText("");
            Contacttxtfield.setText("");

            cmbSup.removeAllItems();
            loadComboBox2();
            
            
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }      
    }//GEN-LAST:event_CreatebtnSupActionPerformed

    private void upbtnSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upbtnSupActionPerformed
//        int id = Integer.parseInt(cmbSup.getSelectedItem().toString());
        String orig = cmbSup.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int id = Integer.parseInt(splitted);
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            
            String newName = Suppliertxtfield.getText();
            String newContact = Contacttxtfield.getText();
            
            String query = "update suppliers set supplier_name= \""+newName+"\", contact_info= \""+newContact+"\" where supplier_id= " +id;
            
            statement.executeUpdate(query);

            Suppliertxtfield.setText("");
            Contacttxtfield.setText("");
            cmbSup.removeAllItems();
            loadComboBox2();

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }        // TODO add your handling code here:            
    }//GEN-LAST:event_upbtnSupActionPerformed

    private void readbtnSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readbtnSupActionPerformed
//             int id = Integer.parseInt(cmbSup.getSelectedItem().toString());

        String orig = cmbSup.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int id = Integer.parseInt(splitted);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement = con.createStatement();
            String query = "select * from suppliers where supplier_id = " + id;
            
            ResultSet sqlresult = statement.executeQuery(query);


            while(sqlresult.next()) {
                Suppliertxtfield.setText(sqlresult.getString("supplier_name"));
                Contacttxtfield.setText(sqlresult.getString("contact_info"));
            }
           
        loadSupOrders();

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }                             // TODO add your handling code here:
        
        
    }//GEN-LAST:event_readbtnSupActionPerformed

    private void SuppliertxtfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuppliertxtfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SuppliertxtfieldActionPerformed

    private void ContacttxtfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContacttxtfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ContacttxtfieldActionPerformed

    private void ItemtxtItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemtxtItActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemtxtItActionPerformed

    private void pricetxtItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricetxtItActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pricetxtItActionPerformed

    private void cmbItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbItemActionPerformed

    private void CreatebtnItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatebtnItActionPerformed
//        int categoryNum = Integer.parseInt(cmbItem.getSelectedItem().toString());
        String orig = cmbItem.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int categoryNum = Integer.parseInt(splitted);
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement = con.createStatement();

            // Verify that the category exists
            String checkCategoryQuery = "SELECT COUNT(*) FROM categories WHERE category_id = " + categoryNum;
            ResultSet resultSet = statement.executeQuery(checkCategoryQuery);

            if (resultSet.next() && resultSet.getInt(1) > 0) {
                // Category exists, proceed with insert
                String item = ItemtxtIt.getText();
                String description = DesctxtIt.getText();
                String unitPrice = pricetxtIt.getText();
                String reorderLevel = ReordertxtIt.getText();

                String query = "INSERT INTO items (item_name, description, category_id, unit_price, quantity_on_hand, reorder_level) VALUES "
                        + "(\"" + item + "\", \"" + description + "\", \"" + categoryNum + "\", \"" + unitPrice + "\", \"" + 0 + "\", \"" + reorderLevel + "\")";

                statement.executeUpdate(query);

                // Clear input fields
                ItemtxtIt.setText("");
                DesctxtIt.setText("");
                pricetxtIt.setText("");
                ReordertxtIt.setText("");

                // Refresh combo boxes
                cmbTrans.removeAllItems();
                cmbItem.removeAllItems();
                cmbSorterCat.removeAllItems();
                loadComboBox();
                loadComboBox3();
                loadComboBox4();

                System.out.println("Item added successfully.");
            } else {
                // Category does not exist, display an error
                System.out.println("Error: The category with ID " + categoryNum + " does not exist.");
            }

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }// TODO add your handling code here:
    }//GEN-LAST:event_CreatebtnItActionPerformed

    private void UpdatebtnItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatebtnItActionPerformed
        int row = Itemtbl.getSelectedRow();
        String itemName = Itemtbl.getValueAt(row, 0).toString();        
        String description = Itemtbl.getValueAt(row, 1).toString();    
//        double categ = Integer.parseInt(cmbItem.getSelectedItem().toString());
        String orig = cmbItem.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int categ = Integer.parseInt(splitted);
        
        
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);
            String updateQuery = "UPDATE items SET item_name = ?, description = ?, category_id = ?, unit_price = ?, reorder_level = ? WHERE item_name = ? and description = ?" ;

            PreparedStatement pst = con.prepareStatement(updateQuery);
                        
            pst.setString(1, ItemtxtIt.getText());
            pst.setString(2, DesctxtIt.getText());
            pst.setDouble(3, categ);
            pst.setDouble(4, Double.parseDouble(pricetxtIt.getText()));
            pst.setInt(5,Integer.parseInt(ReordertxtIt.getText()));
//            pst.setInt(5,Integer.parseInt(QuantitytxtIt.getText()));
            pst.setString(6, itemName);
            pst.setString(7, description);

//            pst.setDouble(3, Integer.parseInt(pricetxtIt.getText()));
 

            int rowsAffected = pst.executeUpdate();

            if(rowsAffected > 0){
                ItemtxtIt.setText("");
                DesctxtIt.setText("");
                pricetxtIt.setText("");
                ReordertxtIt.setText("");
//                QuantitytxtIt.setText("");
//                DesctxtIt.setText("");


                loadComboBox3();

                JOptionPane.showMessageDialog(this, "Supplier updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(this, "No supplier found with the specified ID.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            pst.close();
            con.close();

        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error updating record: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }//TODO add your handling code here:
    }//GEN-LAST:event_UpdatebtnItActionPerformed

    private void ItemtblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemtblMouseClicked
        int row = Itemtbl.getSelectedRow();
        if (row != -1) {
//            int selectedSupplierId = Integer.parseInt(Itemtbl.getValueAt(row, 0).toString());

            String item = Itemtbl.getValueAt(row, 0).toString();
            String description = Itemtbl.getValueAt(row, 1).toString();
            String category = Itemtbl.getValueAt(row, 2).toString();
            String unitPrice = Itemtbl.getValueAt(row, 3).toString();
            String quantity = Itemtbl.getValueAt(row, 4).toString();
            String reorderLevel = Itemtbl.getValueAt(row, 5).toString();    
            
            ItemtxtIt.setText(item);
            DesctxtIt.setText(description);
            pricetxtIt.setText(unitPrice);
            ReordertxtIt.setText(reorderLevel);
//            QuantitytxtIt.setText(quantity);
            
            
//            DeleteSuppliers.setEnabled(true);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemtblMouseClicked

    private void DeletebtnItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebtnItActionPerformed
//        int id = Integer.parseInt(cmbSup.getSelectedItem().toString());
        int row = Itemtbl.getSelectedRow();
        String itemName = Itemtbl.getValueAt(row, 0).toString();        
        String description = Itemtbl.getValueAt(row, 1).toString();    

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

//            Statement statement;
//            statement = con.createStatement();

            String deleteQuery = "delete from items WHERE item_name = ? and description = ?";
            PreparedStatement pst = con.prepareStatement(deleteQuery);

////            statement.executeUpdate(query);
//            pst.setString(1, ItemtxtIt.getText());
//            pst.setString(2, DesctxtIt.getText());
//            
            pst.setString(1, itemName);
            pst.setString(2, description);
            
            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Item deleted successfully.");
            } else {
                System.out.println("No item found with the specified name and description.");
            }

            
                ItemtxtIt.setText("");
                DesctxtIt.setText("");
                pricetxtIt.setText("");
                ReordertxtIt.setText("");
//                QuantitytxtIt.setText("");
                
//            cmbIt.removeAllItems();
            loadComboBox3();

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }             // TODO add your handling code here:
    }//GEN-LAST:event_DeletebtnItActionPerformed

    private void cmbTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTransActionPerformed

    private void cmbSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSupActionPerformed
    
    private void TransactbtnTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransactbtnTransActionPerformed

    String orig = cmbTrans.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int category = Integer.parseInt(splitted);

        String transChoice = cmbTransType.getSelectedItem().toString();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement = con.createStatement();

//            String transType = TransactionTypetxt.getText().trim().toLowerCase();
            int quantity = Integer.parseInt(quantityTranstxt.getText());
            String notes = notestxtTrans.getText();

            // Insert the transaction
            String query = "INSERT INTO transactions (item_id, transaction_date, quantity, transaction_type, notes) VALUES "
                    + "(" + category + ", NOW(), " + quantity + ", '" + transChoice + "', '" + notes + "')";
            statement.executeUpdate(query);

            // Update the quantity_on_hand in the items table
            String updateQuery = "";
            if (transChoice.equals("Stock Out")) {
                String checkQuery = "SELECT quantity_on_hand FROM items WHERE item_id = " + category;
                ResultSet rs = statement.executeQuery(checkQuery);
                if (rs.next()) {
                    int quantityOnHand = rs.getInt("quantity_on_hand");
                    if (quantity > quantityOnHand) {
                        JOptionPane.showMessageDialog(null,
                                "Insufficient quantity on hand. Available: " + quantityOnHand,
                                "Warning", JOptionPane.WARNING_MESSAGE);
                        return; // Exit if insufficient stock
                    }
                    updateQuery = "UPDATE items "
                            + "SET quantity_on_hand = quantity_on_hand - " + quantity
                            + " WHERE item_id = " + category;
                }
            } else if (transChoice.equals("Stock In")) {
                updateQuery = "UPDATE items "
                        + "SET quantity_on_hand = quantity_on_hand + " + quantity
                        + " WHERE item_id = " + category;
            }

            if (!updateQuery.isEmpty()) {
                statement.executeUpdate(updateQuery);
            }

            // Clear input fields
//            TransactionTypetxt.setText("");
            quantityTranstxt.setText("");
            notestxtTrans.setText("");
            
            
            cmbTrans.removeAllItems();

            loadComboBox4();
            loadComboBox3();

            System.out.println("Transaction processed successfully.");
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }

    }//GEN-LAST:event_TransactbtnTransActionPerformed

    private void TransTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TransTableMouseClicked
          int row = TransTable.getSelectedRow();
            if (row != -1) {
//            int selectedSupplierId = Integer.parseInt(Itemtbl.getValueAt(row, 0).toString());

            String transType = TransTable.getValueAt(row, 1).toString();
            String quantity = TransTable.getValueAt(row, 3).toString();
            String notes = TransTable.getValueAt(row, 4).toString();
            
//            TransactionTypetxt.setText(transType);
            quantityTranstxt.setText(quantity);
            notestxtTrans.setText(notes);
            }
                    // TODO add your handling code here:
    }//GEN-LAST:event_TransTableMouseClicked

    private void quantityTranstxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityTranstxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityTranstxtActionPerformed

    private void deletebtnTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnTransActionPerformed
        int row = TransTable.getSelectedRow();
        String notes = TransTable.getValueAt(row, 4).toString();
        String item = TransTable.getValueAt(row, 2).toString();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

//            Statement statement;
//            statement = con.createStatement();
            String deleteQuery = "delete from transactions WHERE notes = ? and item_name = ?";
            PreparedStatement pst = con.prepareStatement(deleteQuery);

////            statement.executeUpdate(query);
//            pst.setString(1, ItemtxtIt.getText());
//            pst.setString(2, DesctxtIt.getText());
//            
            pst.setString(1, notes);
            pst.setString(2, item);

            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Item deleted successfully.");
            } else {
                System.out.println("No item found with the specified name and description.");
            }

//            TransactionTypetxt.setText("");
            quantityTranstxt.setText("");
            notestxtTrans.setText("");
//            cmbIt.removeAllItems();
        cmbTrans.removeAllItems();
            loadComboBox4();

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }                 // TODO add your handling code here:
    }//GEN-LAST:event_deletebtnTransActionPerformed

    private void updatebtnTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnTransActionPerformed
        
        int row = TransTable.getSelectedRow();
        String notes = TransTable.getValueAt(row, 4).toString();
        String itemName = TransTable.getValueAt(row, 2).toString();

        String orig = cmbTrans.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int categ = Integer.parseInt(splitted);
        int itemId = 0;
        String dateTime = TransTable.getValueAt(row, 0).toString();
        String transChoice = cmbTransType.getSelectedItem().toString();

// Get the item_id from the database
        String getItemIdQuery = "SELECT item_id FROM items WHERE item_name = ?";
        try{
        PreparedStatement itemIdPst = con.prepareStatement(getItemIdQuery);
        itemIdPst.setString(1, itemName);

        ResultSet itemIdRs = itemIdPst.executeQuery();
//        int itemId = 0;

        if (itemIdRs.next()) {
            itemId = itemIdRs.getInt("item_id");
        } else {
            JOptionPane.showMessageDialog(this, "Item not found in the database!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        

//          
//        itemIdRs.close();
//        itemIdPst.close();
        } catch (Exception e){
            
        }
// Use itemId in the remaining queries
        try {
            // Existing code for fetching original transaction details, updating stock, and updating transactions...
            String fetchQuery = "SELECT quantity, transaction_type FROM transactions WHERE transaction_date = ? AND item_id = ?";
            PreparedStatement fetchPst = con.prepareStatement(fetchQuery);
            fetchPst.setString(1, dateTime);
            fetchPst.setInt(2, itemId);

            ResultSet rs = fetchPst.executeQuery();
            int originalQuantity = 0;
            String originalTransactionType = "";

            if (rs.next()) {
                originalQuantity = rs.getInt("quantity");
                originalTransactionType = rs.getString("transaction_type");
            }

//            rs.close();
//            fetchPst.close();

            int newQuantity = Integer.parseInt(quantityTranstxt.getText());
            String newTransactionType = transChoice;
            
            int quantityChange = 0;

            if (originalTransactionType.equals("Stock In")) {
                quantityChange -= originalQuantity;
            } else if (originalTransactionType.equals("Stock Out")) {
                quantityChange += originalQuantity;
            }

            if (newTransactionType.equals("Stock In")) {
                quantityChange += newQuantity;
            } else if (newTransactionType.equals("Stock Out")) {
                quantityChange -= newQuantity;
            }

            String updateStockQuery = "UPDATE items SET quantity_on_hand = quantity_on_hand + ? WHERE item_id = ?";
            PreparedStatement updateStockPst = con.prepareStatement(updateStockQuery);
            updateStockPst.setInt(1, quantityChange);
            updateStockPst.setInt(2, itemId);

            updateStockPst.executeUpdate();
            updateStockPst.close();

            String updateQuery = "UPDATE transactions SET quantity = ?, transaction_type = ?, notes = ?, transaction_date = now() WHERE transaction_date = ? AND item_id = ?";
            PreparedStatement pst = con.prepareStatement(updateQuery);

//            pst.setInt(1, categ);
            pst.setInt(1, newQuantity);
            pst.setString(2, newTransactionType);
            pst.setString(3, notestxtTrans.getText());
            pst.setString(4, dateTime);
            pst.setInt(5, itemId);

            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
//                TransactionTypetxt.setText("");
                quantityTranstxt.setText("");
                notestxtTrans.setText("");

                loadComboBox4();

                JOptionPane.showMessageDialog(this, "Transaction updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Transaction update failed.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            pst.close();
            con.close();
            cmbTrans.removeAllItems();

            loadComboBox4();
            loadComboBox3();


        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating record: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_updatebtnTransActionPerformed

    private void cmbCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCatActionPerformed

    private void Purchasebtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Purchasebtn2ActionPerformed
//     cmbItemPurchase1.removeAllItems();
        String selectedCategory = cmbSupplierFilter.getSelectedItem().toString(); // Get selected category from combo box
        String splittedSupp = selectedCategory.split(" - ")[0];
        int suppID = Integer.parseInt(splittedSupp);
        
        try{
            if (suppID == 0) {
                loadSupOrders();
            } else {
                loadSupOrders(suppID);
            }        
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "PurchaseOrders");          
    
        } catch(Exception e){
            
        }

// TODO add your handling code here:
//        loadComboBox4();
//          
//        String origSupp = cmbSupplierPurch1.getSelectedItem().toString();
//        String splittedSupp = origSupp.split(" - ")[0];
//        int purOrdId = Integer.parseInt(splittedSupp);
//
//        try {
//            Class.forName("com.mysql.cj.jdbc.Driver");
//            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);
//
//            // Use PreparedStatement for safer SQL execution
//            String insertPurchaseOrderQuery = "INSERT INTO PurchaseOrders (order_date, supplier_id) VALUES (NOW(), ?)";
//            PreparedStatement psPurchaseOrder = con.prepareStatement(insertPurchaseOrderQuery, Statement.RETURN_GENERATED_KEYS);
//
//            // Set supplier_id parameter
//            psPurchaseOrder.setInt(1, purOrdId);
//
//            // Execute the PurchaseOrder insertion
//            psPurchaseOrder.executeUpdate();
//
//            // Retrieve the generated purchase_order_id
//            ResultSet generatedKeys = psPurchaseOrder.getGeneratedKeys();
//            newPurchaseOrderId = 0;
//            if (generatedKeys.next()) {
//                newPurchaseOrderId = generatedKeys.getInt(1);
//                txtOrderID.setText(""+newPurchaseOrderId);
//            }
//
////            itemsForm itemform = new itemsForm(newPurchaseOrderId, TransTable, this);
////            itemform.setVisible(true);
//            
//            loadComboBox4();
//            loadComboBox3();
//
//        } catch (Exception e) {
//            System.err.println("Error1: " + e.getMessage());
//        }
//        
//        loadComboBox4();


    }//GEN-LAST:event_Purchasebtn2ActionPerformed

    private void PurchaseOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PurchaseOrdersMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_PurchaseOrdersMouseClicked

    private void purchaseQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_purchaseQuantityActionPerformed

    private void totalAmountPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmountPurchaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalAmountPurchaseActionPerformed

    private void cmbItemPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemPurchaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbItemPurchaseActionPerformed

    private void purchaseUnitQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseUnitQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_purchaseUnitQuantityActionPerformed

    private void cmbSupplierPurchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierPurchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSupplierPurchActionPerformed

    private void clearPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPurchaseActionPerformed
            purchaseQuantity.setText("");
            notesPurchase.setText("");
            purchaseUnitQuantity.setText("");
            totalAmountPurchase.setText("");
            // TODO add your handling code here:
    }//GEN-LAST:event_clearPurchaseActionPerformed

    private void AddItemPurchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemPurchbtnActionPerformed
       
        String origSupp = cmbSupplierPurch.getSelectedItem().toString();
        String splittedSupp = origSupp.split(" - ")[0];
        int purOrdId = Integer.parseInt(splittedSupp);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            // Use PreparedStatement for safer SQL execution
            String insertPurchaseOrderQuery = "INSERT INTO PurchaseOrders (order_date, supplier_id) VALUES (NOW(), ?)";
            PreparedStatement psPurchaseOrder = con.prepareStatement(insertPurchaseOrderQuery, Statement.RETURN_GENERATED_KEYS);

            // Set supplier_id parameter
            psPurchaseOrder.setInt(1, purOrdId);

            // Execute the PurchaseOrder insertion
            psPurchaseOrder.executeUpdate();

            // Retrieve the generated purchase_order_id
            ResultSet generatedKeys = psPurchaseOrder.getGeneratedKeys();
            int newPurchaseOrderId = 0;
            if (generatedKeys.next()) {
                newPurchaseOrderId = generatedKeys.getInt(1);
            }
            
            itemsForm itemform = new itemsForm(newPurchaseOrderId,TransTable,this);
            itemform.setVisible(true);
            
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_AddItemPurchbtnActionPerformed

    private void cmbPurOrdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPurOrdIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPurOrdIdActionPerformed

    private void AddOrderbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddOrderbtnActionPerformed

        String origSupp = cmbSupplierPurch.getSelectedItem().toString();
        String splittedSupp = origSupp.split(" - ")[0];
        int purOrdId = Integer.parseInt(splittedSupp);
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement = con.createStatement();

            // Insert the transaction
            String query = "INSERT INTO PurchaseOrders (order_date, supplier_id) VALUES (NOW(), "
                    + purOrdId + ")";

            statement.executeUpdate(query);
            cmbPurOrdId.removeAllItems();
            loadPurchasId();
            
            System.out.println("Purchase Orders processed successfully.");
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_AddOrderbtnActionPerformed

    private void newPurchase1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPurchase1ActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "PurchaseOrders");           // TODO add your handling code here:
//        loadComboBox4();
        String filterSet = cmbSupplierFilter.getSelectedItem().toString();
        String splittedFilt = filterSet.split(" - ")[0];
        int filterID = Integer.parseInt(splittedFilt);
        
        String origSupp = cmbSupplierPurch1.getSelectedItem().toString();
        String splittedSupp = origSupp.split(" - ")[0];
        int purOrdId = Integer.parseInt(splittedSupp);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            // Use PreparedStatement for safer SQL execution
            String insertPurchaseOrderQuery = "INSERT INTO PurchaseOrders (order_date, supplier_id) VALUES (NOW(), ?)";
            PreparedStatement psPurchaseOrder = con.prepareStatement(insertPurchaseOrderQuery, Statement.RETURN_GENERATED_KEYS);

            // Set supplier_id parameter
            psPurchaseOrder.setInt(1, purOrdId);

            // Execute the PurchaseOrder insertion
            psPurchaseOrder.executeUpdate();

            // Retrieve the generated purchase_order_id
            ResultSet generatedKeys = psPurchaseOrder.getGeneratedKeys();
            newPurchaseOrderId = 0;
            if (generatedKeys.next()) {
                newPurchaseOrderId = generatedKeys.getInt(1);
                txtOrderID.setText(""+newPurchaseOrderId);

            }

//            itemsForm itemform = new itemsForm(newPurchaseOrderId, TransTable, this);
//            itemform.setVisible(true);
//            loadComboBox4();
//            loadComboBox3();
            loadSupOrders(filterID);
            
            purchaseUnitQuantity1.setText("");
            purchaseQuantity1.setText("");
            notesPurchase1.setText("");
            totalAmountPurchase1.setText("");
//            newPurchaseOrderId = (int) (System.currentTimeMillis() % 1_000_000); // Generate a 6-digit key
//            txtOrderID.setText(String.valueOf(newPurchaseOrderId));
//
//            // Simulate clearing fields after generating a key
//            loadSupOrders(filterID);
//
//            purchaseUnitQuantity1.setText("");
//            purchaseQuantity1.setText("");
//            notesPurchase1.setText("");
//            totalAmountPurchase1.setText("");

        } catch (Exception e) {
            System.err.println("Error1: " + e.getMessage());
        }

        loadComboBox4();


    }//GEN-LAST:event_newPurchase1ActionPerformed

    private void AddItemPurchbtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemPurchbtn1ActionPerformed
//          cmbItemPurchase1.removeAllItems();
//          loadComboBox3();
        
        //get category
        String orig = cmbItemPurchase1.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int category = Integer.parseInt(splitted);
        
        // get unit price and quantity
        int quantity = Integer.parseInt(purchaseQuantity1.getText());
        double unitPrice = Double.parseDouble(purchaseUnitQuantity1.getText());
        
        //get Supplier ID
        String origSupp = cmbSupplierPurch1.getSelectedItem().toString();
        String splittedSupp = origSupp.split(" - ")[0];
        int purOrdId = Integer.parseInt(splittedSupp);
        
        String purchID = txtOrderID.getText();
        String amountTxt = totalAmountPurchase1.getText();

        //get notes
        String notes = notesPurchase1.getText();
        double totalAmount = quantity * unitPrice;

        try {
            
            if(purchID == null || amountTxt == null ){
                  JOptionPane.showMessageDialog(null,
                        "Please add a new Purchase Order before adding items and complete calculate process.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                System.err.println("Failed to retrieve the Purchase Order ID.");
            } else {
            // Perform database updates
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement = con.createStatement();
            
            
            String query = "INSERT INTO transactions (item_id, transaction_date, quantity, transaction_type, notes) VALUES "
                    + "(" + category + ", NOW(), " + quantity + ", '" + "Stock in" + "', '" + notes + "')";
            statement.executeUpdate(query);

            // Update the quantity_on_hand in the items table
            String updateQuery = "";
        
                updateQuery = "UPDATE items "
                        + "SET quantity_on_hand = quantity_on_hand + " + quantity
                        + " WHERE item_id = " + category;
          

            if (!updateQuery.isEmpty()) {
                statement.executeUpdate(updateQuery);
            }
            System.out.println("Transaction processed successfully.");
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            // Check if we have a valid ID
            if (newPurchaseOrderId != 0) {
                System.out.println("Purchase Orders processed successfully with ID: " + newPurchaseOrderId);

                // Now, insert the PurchaseOrderItems using the newPurchaseOrderId
                String insertPurchaseOrderItemQuery = "INSERT INTO PurchaseOrderItems (item_id, quantity, unit_price, purchase_order_id) VALUES (?, ?, ?, ?)";
                PreparedStatement psPurchaseOrderItem = con.prepareStatement(insertPurchaseOrderItemQuery);

                // Set parameters for the PurchaseOrderItem
                psPurchaseOrderItem.setInt(1, category);  // item_id
                psPurchaseOrderItem.setInt(2, quantity);  // quantity
                psPurchaseOrderItem.setDouble(3, unitPrice);  // unit_price
                psPurchaseOrderItem.setInt(4, newPurchaseOrderId);  // purchase_order_id

                // Execute the insertion for PurchaseOrderItem
                psPurchaseOrderItem.executeUpdate();

                // Recalculate the total_amount for the specific purchase order
                String recalculateTotalAmountQuery = "SELECT SUM(quantity * unit_price) AS totalAmount FROM PurchaseOrderItems WHERE purchase_order_id = ?";
                PreparedStatement psRecalculate = con.prepareStatement(recalculateTotalAmountQuery);
                psRecalculate.setInt(1, newPurchaseOrderId);
                ResultSet resultSet = psRecalculate.executeQuery();

                double newTotalAmount = 0;
                if (resultSet.next()) {
                    newTotalAmount = resultSet.getDouble("totalAmount");
                }

                // Update the total_amount in the PurchaseOrders table
                String updateTotalAmountQuery = "UPDATE PurchaseOrders SET total_amount = ? WHERE purchase_order_id = ?";
                PreparedStatement psUpdateTotalAmount = con.prepareStatement(updateTotalAmountQuery);
                psUpdateTotalAmount.setDouble(1, newTotalAmount);
                psUpdateTotalAmount.setInt(2, newPurchaseOrderId);
                psUpdateTotalAmount.executeUpdate();

                // Update the totalAmountPurchase text field to reflect the new total
                totalAmountPurchase1.setText(String.valueOf(newTotalAmount));

                System.out.println("Ordered items successfully.");
            } else {
                // Display an error message prompting the user to add a new order first
                JOptionPane.showMessageDialog(null,
                        "Please add a new Purchase Order before adding items.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                System.err.println("Failed to retrieve the Purchase Order ID.");
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            JOptionPane.showMessageDialog(null,
                    "An unexpected error occurred: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

        //        loadComboBox4();
          
            loadComboBox4();

        // TODO add your handling code here:
    }//GEN-LAST:event_AddItemPurchbtn1ActionPerformed

    private void purchaseQuantity1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseQuantity1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_purchaseQuantity1ActionPerformed

    private void totalAmountPurchase1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmountPurchase1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalAmountPurchase1ActionPerformed

    private void cmbSupplierPurch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierPurch1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSupplierPurch1ActionPerformed

    private void purchaseUnitQuantity1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseUnitQuantity1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_purchaseUnitQuantity1ActionPerformed

    private void cmbItemPurchase1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemPurchase1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbItemPurchase1ActionPerformed

    private void txtOrderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderIDActionPerformed

    private void cmbSorterCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSorterCatActionPerformed
        String selectedCategory = cmbSorterCat.getSelectedItem().toString(); // Get selected category from combo box
        String splittedSupp = selectedCategory.split(" - ")[1];
        selectedCategory = splittedSupp;

        if(selectedCategory == null){
            
        } else {
            if(selectedCategory.equalsIgnoreCase("All")){
                loadComboBox3("none");
            } else {
            loadComboBox3(selectedCategory);
            }
        }
    }//GEN-LAST:event_cmbSorterCatActionPerformed

    private void cmbSupplierFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierFilterActionPerformed
        String selectedCategory = cmbSupplierFilter.getSelectedItem().toString(); // Get selected category from combo box
        String splittedSupp = selectedCategory.split(" - ")[0];
        int suppID = Integer.parseInt(splittedSupp);
        
        if(splittedSupp == null){
        
        }else{
            if(suppID == 0){
                loadSupOrders();
            } else {
                loadSupOrders(suppID);
            }
        }
         // TODO add your handling code here:
    }//GEN-LAST:event_cmbSupplierFilterActionPerformed

    private void savebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "PurchaseOrders");           // TODO add your handling code here:
//        loadComboBox4();
        String filterSet = cmbSupplierFilter.getSelectedItem().toString();
        String splittedFilt = filterSet.split(" - ")[0];
        int filterID = Integer.parseInt(splittedFilt);

        String origSupp = cmbSupplierPurch1.getSelectedItem().toString();
        String splittedSupp = origSupp.split(" - ")[0];
        int purOrdId = Integer.parseInt(splittedSupp);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);
            String query = "INSERT INTO PurchaseOrders (order_date, supplier_id) VALUES (NOW(), ?)";
            PreparedStatement ps = con.prepareStatement(query);

            // Set the supplier_id parameter
            ps.setInt(1, purOrdId);

            // Execute the query (no key retrieval)
            ps.executeUpdate();


            loadSupOrders(filterID);

            purchaseUnitQuantity1.setText("");
            purchaseQuantity1.setText("");
            notesPurchase1.setText("");
            totalAmountPurchase1.setText("");

        } catch (Exception e) {
            System.err.println("Error1: " + e.getMessage());
        }

        loadComboBox4();

        // TODO add your handling code here:
    }//GEN-LAST:event_savebtnActionPerformed


public void loadComboBox() {

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult, sqlresult2;
            sqlresult = statement.executeQuery("select * from categories");


            while(sqlresult.next()) {
                cmbCat.addItem(sqlresult.getString("category_id") +" - "+sqlresult.getString("category_name"));
                cmbItem.addItem(sqlresult.getString("category_id") +" - "+sqlresult.getString("category_name"));
                cmbSorterCat.addItem(sqlresult.getString("category_id") +" - "+sqlresult.getString("category_name"));

            }
            
            DefaultTableModel tableModel = new DefaultTableModel(new String[] 
                    {"ID", "Last Name", "First Name", "ID Number"}, 0);


        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
    public void loadComboBox2() {

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult;
            sqlresult = statement.executeQuery("select * from suppliers");

            
            
            DefaultTableModel tableModel = new DefaultTableModel(new String[] 
                    {"Supplier", "Contact Information"}, 0);
            
            Suppliertbl.setModel(tableModel);
            
            while(sqlresult.next()) {
                tableModel.addRow(new Object[] 
                    {sqlresult.getString("supplier_name"), sqlresult.getString("contact_info")});
                cmbSup.addItem(sqlresult.getString("supplier_id") +" - " + sqlresult.getString("supplier_name"));
                cmbSupplierPurch1.addItem(sqlresult.getString("supplier_id") +" - " + sqlresult.getString("supplier_name"));
//                DUMBASSCMB.addItem(sqlresult.getString("supplier_id") + " - " + sqlresult.getString("supplier_name"));
                cmbSupplierFilter.addItem(sqlresult.getString("supplier_id") + " - " + sqlresult.getString("supplier_name"));


            }
           
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void loadComboBox3() {
//        String selectedCategory = cmbSorterCat.getSelectedItem().toString(); // Get selected category from combo box
//        String splittedSupp = selectedCategory.split(" - ")[0];
//        selectedCategory = splittedSupp;

        try {
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement = con.createStatement();

            // Updated query to filter by the selected category
            ResultSet sqlresult = statement.executeQuery(
                    "SELECT i.item_name, i.description, c.category_name, i.unit_price, i.quantity_on_hand, i.reorder_level, i.item_id "
                    + "FROM items i "
                    + "JOIN categories c ON i.category_id = c.category_id "
                    + "ORDER BY i.item_id DESC"
            );

            // Define the table model with updated column headers
            DefaultTableModel tableModel = new DefaultTableModel(new String[]{
                "Item", "Description", "Category", "Unit Price", "Quantity", "Reorder Level"
            }, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // This causes all cells to be not editable
                }
            };

            Itemtbl.setModel(tableModel);

            // Populate the table model with the query result
            while (sqlresult.next()) {
                tableModel.addRow(new Object[]{
                    sqlresult.getString("item_name"),
                    sqlresult.getString("description"),
                    sqlresult.getString("category_name"),
                    sqlresult.getString("unit_price"),
                    sqlresult.getString("quantity_on_hand"),
                    sqlresult.getString("reorder_level")
                });

                // Add items to combo boxes
                cmbTrans.addItem(sqlresult.getString("item_id") + " - " + sqlresult.getString("item_name"));
                cmbItemPurchase1.addItem(sqlresult.getString("item_id") + " - " + sqlresult.getString("item_name"));
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
    public void loadComboBox3(String cmbResult) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement = con.createStatement();
            ResultSet sqlresult;
            // Updated query to filter by the selected category
            if (cmbResult.equalsIgnoreCase("none")){
                 sqlresult = statement.executeQuery(
                    "SELECT i.item_name, i.description, c.category_name, i.unit_price, i.quantity_on_hand, i.reorder_level, i.item_id "
                    + "FROM items i "
                    + "JOIN categories c ON i.category_id = c.category_id "
                    + "ORDER BY i.item_id DESC"
            );

            } else {
                 sqlresult = statement.executeQuery(
                    "SELECT i.item_name, i.description, c.category_name, i.unit_price, i.quantity_on_hand, i.reorder_level, i.item_id "
                    + "FROM items i "
                    + "JOIN categories c ON i.category_id = c.category_id "
                    + "WHERE c.category_name = '" + cmbResult + "' " // Filter by category
                    + "ORDER BY i.item_id DESC"
            );

            }
            
            // Define the table model with updated column headers
            DefaultTableModel tableModel = new DefaultTableModel(new String[]{
                "Item", "Description", "Category", "Unit Price", "Quantity", "Reorder Level"
            }, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // This causes all cells to be not editable
                }
            };

            Itemtbl.setModel(tableModel);

            // Populate the table model with the query result
            while (sqlresult.next()) {
                tableModel.addRow(new Object[]{
                    sqlresult.getString("item_name"),
                    sqlresult.getString("description"),
                    sqlresult.getString("category_name"),
                    sqlresult.getString("unit_price"),
                    sqlresult.getString("quantity_on_hand"),
                    sqlresult.getString("reorder_level")
                });

                // Add items to combo boxes
                cmbTrans.addItem(sqlresult.getString("item_id") + " - " + sqlresult.getString("item_name"));
                cmbItemPurchase1.addItem(sqlresult.getString("item_id") + " - " + sqlresult.getString("item_name"));
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
    
    
    public void loadComboBox4() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult;
//            sqlresult = statement.executeQuery("select * from transactions ORDER BY transaction_date");
            sqlresult = statement.executeQuery(
                    "SELECT t.transaction_date, t.transaction_type, i.item_name, t.quantity, t.notes "
                    + "FROM transactions t JOIN items i ON t.item_id = i.item_id "
                    + "ORDER BY t.transaction_id DESC"
            );

            DefaultTableModel tableModel = new DefaultTableModel(new String[]{"Transaction Date", "Transaction Type", "Item", "Quantity", "Notes"}, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;//This causes all cells to be not editable
                }
            };

            TransTable.setModel(tableModel);
            //            
//            int holder1 = Integer.parseInt(sqlresult.getString("item_id"));
//            String holder = sqlresult.getString("Select item_name where item_id = " + holder1);

            while (sqlresult.next()) {
                tableModel.addRow(new Object[]{
                    sqlresult.getString("transaction_date"),
                    sqlresult.getString("transaction_type"),
                    sqlresult.getString("item_name"),
                    sqlresult.getString("quantity"),
                    sqlresult.getString("notes")});
            }

//            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
//            TransTable.setRowSorter(sorter);
            // Optionally set the initial sort order by the date column (0 index)
//            sorter.setSortKeys(List.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
            TransTable.setAutoCreateRowSorter(false);

        } catch (Exception e) {
            System.out.println("Error4: " + e.getMessage());
        }
    }
    public void loadComboBox4(String cmbResult) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult;
//            sqlresult = statement.executeQuery("select * from transactions ORDER BY transaction_date");
            sqlresult = statement.executeQuery(
                    "SELECT t.transaction_date, t.transaction_type, i.item_name, t.quantity, t.notes "
                    + "FROM transactions t JOIN items i ON t.item_id = i.item_id "
                    + "ORDER BY t.transaction_id DESC"
            );

            DefaultTableModel tableModel = new DefaultTableModel(new String[]{"Transaction Date", "Transaction Type", "Item", "Quantity", "Notes"}, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;//This causes all cells to be not editable
                }
            };

            TransTable.setModel(tableModel);
            //            
//            int holder1 = Integer.parseInt(sqlresult.getString("item_id"));
//            String holder = sqlresult.getString("Select item_name where item_id = " + holder1);

            while (sqlresult.next()) {
                tableModel.addRow(new Object[]{
                    sqlresult.getString("transaction_date"),
                    sqlresult.getString("transaction_type"),
                    sqlresult.getString("item_name"),
                    sqlresult.getString("quantity"),
                    sqlresult.getString("notes")});
            }

//            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
//            TransTable.setRowSorter(sorter);
            // Optionally set the initial sort order by the date column (0 index)
//            sorter.setSortKeys(List.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
            TransTable.setAutoCreateRowSorter(false);

        } catch (Exception e) {
            System.out.println("Error4: " + e.getMessage());
        }
    }

    public void loadComboBox4(JTable thisTable) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult;
//            sqlresult = statement.executeQuery("select * from transactions ORDER BY transaction_date");
            sqlresult = statement.executeQuery(
                    "SELECT t.transaction_date, t.transaction_type, i.item_name, t.quantity, t.notes "
                            + "FROM transactions t JOIN items i ON t.item_id = i.item_id "
                            + "ORDER BY t.transaction_id DESC"
            );

            
            DefaultTableModel tableModel = new DefaultTableModel(new String[] 
                    {"Transaction Date", "Transaction Type", "Item", "Quantity", "Notes"}, 0)
            
                    {
                            @Override
                            public boolean isCellEditable(int row, int column) {
                            return false;//This causes all cells to be not editable
                        }
                    };
            
            TransTable.setModel(tableModel);
            //            
//            int holder1 = Integer.parseInt(sqlresult.getString("item_id"));
//            String holder = sqlresult.getString("Select item_name where item_id = " + holder1);
            
            while(sqlresult.next()) {
                tableModel.addRow(new Object[] 
                    {
                    
                    sqlresult.getString("transaction_date"), 
                    sqlresult.getString("transaction_type"), 
                    sqlresult.getString("item_name"), 
                    sqlresult.getString("quantity"), 
                    sqlresult.getString("notes")});
            }
            
//            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
//            TransTable.setRowSorter(sorter);

            // Optionally set the initial sort order by the date column (0 index)
//            sorter.setSortKeys(List.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
        TransTable.setAutoCreateRowSorter(false);
         
        } catch (Exception e) {
            System.out.println("Error4: " + e.getMessage());
        }
    }
    
    public void loadPurchasId() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult;
            sqlresult = statement.executeQuery("select * from PurchaseOrders");
        
            
            while(sqlresult.next()) {
                   cmbPurOrdId.addItem(sqlresult.getString("purchase_order_id"));
            }
            
        } catch (Exception e) {
            System.out.println("Error: ID" + e.getMessage());
        }
    }
    
    public void loadCategoriesItems(){
//        
//        String orig = cmbCat.getSelectedItem().toString();
//        String splitted = orig.split(" - ")[1];
//        String categoryName = splitted;
//
//        // Get selected sorting column from another combo box
//        String sortBy = cmbSorterCat.getSelectedItem().toString();
//        String splittedFilter = sortBy.split(" - ")[1];
//        // e.g., "Item Name", "Quantity", etc.
//
//        // Map the selected value to corresponding database column
//        String sortColumn = splittedFilter;
//
//        try {
//            Class.forName("com.mysql.cj.jdbc.Driver");
//            con = DriverManager.getConnection(dburl, dbusername, dbpassword);
//
//            Statement statement = con.createStatement();
//
//            // Dynamic query with category filter and sorting
//            ResultSet sqlresult = statement.executeQuery(
//                "SELECT i.item_name, i.description, i.unit_price, i.quantity_on_hand, i.reorder_level, i.item_id "
//                + "FROM items i "
//                + "JOIN categories c ON i.category_id = c.category_id "
//                + "WHERE c.category_name = '" + categoryName + "' "
//            );
//
//            // Define the table model
//            DefaultTableModel tableModel = new DefaultTableModel(new String[]{
//                "Item", "Description", "Unit Price", "Quantity", "Reorder Level"
//            }, 0) {
//                @Override
//                public boolean isCellEditable(int row, int column) {
//                    return false; // This causes all cells to be not editable
//                }
//            };
//
//            catTable.setModel(tableModel);
//
//            // Populate the table model with the query result
//            while (sqlresult.next()) {
//                tableModel.addRow(new Object[]{
//                    sqlresult.getString("item_name"),
//                    sqlresult.getString("description"),
//                    sqlresult.getString("unit_price"),
//                    sqlresult.getString("quantity_on_hand"),
//                    sqlresult.getString("reorder_level")
//                });
//
//                // Add items to combo boxes
//                cmbTrans.addItem(sqlresult.getString("item_id") + " - " + sqlresult.getString("item_name"));
//                cmbItemPurchase1.addItem(sqlresult.getString("item_id") + " - " + sqlresult.getString("item_name"));
//            }
//
//        } catch (Exception e) {
//            System.out.println("Error: " + e.getMessage());
//        }
    }
    
    public void loadSupOrders() {
        Connection con = null;
        Statement statement = null;
        ResultSet sqlresult = null;

        try {
            // Load MySQL JDBC Driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish database connection
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            // Create a statement
            statement = con.createStatement();

            // Define and execute the SQL query
            String query = """
            SELECT i.order_date, i.total_amount
            FROM purchaseorders i
        """;
            sqlresult = statement.executeQuery(query);

            // Define the table model with updated column headers
            DefaultTableModel tableModel = new DefaultTableModel(
                    new String[]{"Order Date", "Total Amount"}, 0
            ) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Prevent cell editing
                }
            };

            // Set the table model for the JTable
            PurchaseOrderTable.setModel(tableModel);

            // Populate the table model with the query result
            while (sqlresult.next()) {
                tableModel.addRow(new Object[]{
                    sqlresult.getString("order_date"),
                    sqlresult.getString("total_amount")
                });
            }

        } catch (Exception e) {
            // Log the error for debugging
            System.out.println("Error: " + e.getMessage());
            e.printStackTrace(); // Optional: Remove in production
        } finally {
            // Close resources to prevent memory leaks
            try {
                if (sqlresult != null) {
                    sqlresult.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (Exception ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    }

    
    public void loadSupOrders(int suppID) {
        Connection con = null;
        PreparedStatement preparedStatement = null;
        ResultSet sqlresult = null;

        try {
            // Load MySQL JDBC Driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish database connection
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            // Use a prepared statement to prevent SQL injection
            String query = """
            SELECT i.order_date, i.total_amount
            FROM purchaseorders i
            WHERE i.supplier_id = ?
        """;
            preparedStatement = con.prepareStatement(query);
            preparedStatement.setInt(1, suppID);

            // Execute the query
            sqlresult = preparedStatement.executeQuery();

            // Define the table model with updated column headers
            DefaultTableModel tableModel = new DefaultTableModel(
                    new String[]{"Order Date", "Total Amount"}, 0
            ) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Prevent cell editing
                }
            };

            // Set the table model for the JTable
            PurchaseOrderTable.setModel(tableModel);

            // Populate the table model with the query result
            while (sqlresult.next()) {
                tableModel.addRow(new Object[]{
                    sqlresult.getString("order_date"),
                    sqlresult.getString("total_amount")
                });
            }

        } catch (Exception e) {
            // Log the error for debugging
            System.out.println("Error: " + e.getMessage());
            e.printStackTrace(); // Optional: Remove in production
        } 

    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmptyOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmptyOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmptyOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmptyOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmptyOne().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddItemPurchbtn;
    private javax.swing.JButton AddItemPurchbtn1;
    private javax.swing.JButton AddOrderbtn;
    private javax.swing.JPanel Categories;
    private javax.swing.JButton Categoriesbtn;
    private javax.swing.JTextField Categorytxtfield;
    private javax.swing.JTextField Categorytxtfield1;
    private javax.swing.JTextField Categorytxtfield2;
    private javax.swing.JTextField Contacttxtfield;
    private javax.swing.JButton CreatebtnCat;
    private javax.swing.JButton CreatebtnCat1;
    private javax.swing.JButton CreatebtnCat2;
    private javax.swing.JButton CreatebtnIt;
    private javax.swing.JButton CreatebtnSup;
    private javax.swing.JButton DeletebtnIt;
    private javax.swing.JTextArea DesctxtIt;
    private javax.swing.JPanel Items;
    private javax.swing.JButton Itemsbtn;
    private static javax.swing.JTable Itemtbl;
    private javax.swing.JTextField ItemtxtIt;
    private javax.swing.JTable PurchaseOrderTable;
    private javax.swing.JPanel PurchaseOrders;
    private javax.swing.JButton Purchasebtn2;
    private javax.swing.JTextField ReordertxtIt;
    private javax.swing.JPanel Suppliers;
    private javax.swing.JButton Suppliersbtn;
    private static javax.swing.JTable Suppliertbl;
    private javax.swing.JTextField Suppliertxtfield;
    private javax.swing.JTable TransTable;
    private javax.swing.JButton TransactbtnTrans;
    private javax.swing.JPanel Transactions;
    private javax.swing.JButton Transactionsbtn;
    private javax.swing.JButton UpdatebtnIt;
    private javax.swing.JButton clearPurchase;
    private javax.swing.JComboBox<String> cmbCat;
    private javax.swing.JComboBox<String> cmbCat1;
    private javax.swing.JComboBox<String> cmbCat2;
    private javax.swing.JComboBox<String> cmbItem;
    private javax.swing.JComboBox<String> cmbItemPurchase;
    private javax.swing.JComboBox<String> cmbItemPurchase1;
    private javax.swing.JComboBox<String> cmbPurOrdId;
    private javax.swing.JComboBox<String> cmbSorterCat;
    private javax.swing.JComboBox<String> cmbSup;
    private javax.swing.JComboBox<String> cmbSupplierFilter;
    private javax.swing.JComboBox<String> cmbSupplierPurch;
    private javax.swing.JComboBox<String> cmbSupplierPurch1;
    private javax.swing.JComboBox<String> cmbTrans;
    private javax.swing.JComboBox<String> cmbTransType;
    private javax.swing.JButton delbtnCat;
    private javax.swing.JButton delbtnCat1;
    private javax.swing.JButton delbtnCat2;
    private javax.swing.JButton deletebtnTrans;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton newPurchase1;
    private javax.swing.JTextPane notesPurchase;
    private javax.swing.JTextPane notesPurchase1;
    private javax.swing.JTextArea notestxtTrans;
    private javax.swing.JTextField pricetxtIt;
    private javax.swing.JTextField purchaseQuantity;
    private javax.swing.JTextField purchaseQuantity1;
    private javax.swing.JTextField purchaseUnitQuantity;
    private javax.swing.JTextField purchaseUnitQuantity1;
    private javax.swing.JTextField quantityTranstxt;
    private javax.swing.JButton readbtnCat;
    private javax.swing.JButton readbtnCat1;
    private javax.swing.JButton readbtnCat2;
    private javax.swing.JButton readbtnSup;
    private javax.swing.JButton savebtn;
    private javax.swing.JTextField totalAmountPurchase;
    private javax.swing.JTextField totalAmountPurchase1;
    private javax.swing.JTextField txtOrderID;
    private javax.swing.JButton upbtnCat;
    private javax.swing.JButton upbtnCat1;
    private javax.swing.JButton upbtnCat2;
    private javax.swing.JButton upbtnSup;
    private javax.swing.JButton updatebtnTrans;
    // End of variables declaration//GEN-END:variables
}
