/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginreg;

import loginreg.EmptyOne;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author chubb
 */
public class itemsForm extends javax.swing.JFrame {
    private static Connection con;
    private static String dburl = "jdbc:mysql://localhost:3306/finals";
    private static String dbusername = "root";
//    private static String dbpassword = "root";
    private static String dbpassword = "AdDU2202301476234";
    
    private static int newPurchaseOrderId = 0;
    private static JTable thisTable;   
    private static EmptyOne emptyone;
    
    /**
    
     * Creates new form itemsForm
     */
    public itemsForm(int OrderNum,JTable thistable , EmptyOne emptyOne){
        initComponents();
        this.newPurchaseOrderId = OrderNum;
        this.thisTable = thistable;
        this.emptyone = emptyOne;
        
        emptyone.loadComboBox4(thisTable);
//        loadComboBox();
        loadComboBox2();
        loadComboBox3();

    }
    
    
    public itemsForm() {
        initComponents();
//        loadComboBox();
        loadComboBox2();
        loadComboBox3();
//        loadComboBox4();
//        loadPurchasId();

    }
    public itemsForm(EmptyOne emptyone){
        initComponents();
        emptyone.loadComboBox4();
        
        
    }
//    private EmptyOne emptyOne;
//
//    public itemsForm(EmptyOne emptyOneInstance) {
//        this.emptyOne = emptyOneInstance;
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel17 = new javax.swing.JLabel();
        cmbSupplierPurch2 = new javax.swing.JComboBox<>();
        purchaseUnitQuantity2 = new javax.swing.JTextField();
        cmbItemPurchase2 = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        notesPurchase2 = new javax.swing.JTextPane();
        clearPurchase2 = new javax.swing.JButton();
        AddItemPurchbtn2 = new javax.swing.JButton();
        purchaseQuantity2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        totalAmountPurchase2 = new javax.swing.JTextField();
        calcPurch2 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        cmbPurchType = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));

        jLabel17.setText("Total Amount:");

        cmbSupplierPurch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierPurch2ActionPerformed(evt);
            }
        });

        purchaseUnitQuantity2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseUnitQuantity2ActionPerformed(evt);
            }
        });

        cmbItemPurchase2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemPurchase2ActionPerformed(evt);
            }
        });

        jLabel18.setText("Unit Price:");

        jScrollPane6.setViewportView(notesPurchase2);

        clearPurchase2.setText("Close");
        clearPurchase2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPurchase2ActionPerformed(evt);
            }
        });

        AddItemPurchbtn2.setText("Proceed");
        AddItemPurchbtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemPurchbtn2ActionPerformed(evt);
            }
        });

        purchaseQuantity2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseQuantity2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Quantity:");

        jLabel11.setText("Item:");

        jLabel15.setText("Supplier:");

        jLabel16.setText("Notes:");

        totalAmountPurchase2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmountPurchase2ActionPerformed(evt);
            }
        });

        calcPurch2.setText("Calculate");
        calcPurch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcPurch2ActionPerformed(evt);
            }
        });

        jLabel19.setText("Purchase Type");

        cmbPurchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Stock in", "Stock out" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(clearPurchase2)
                        .addComponent(AddItemPurchbtn2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cmbPurchType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbSupplierPurch2, javax.swing.GroupLayout.Alignment.LEADING, 0, 100, Short.MAX_VALUE)
                                .addComponent(cmbItemPurchase2, javax.swing.GroupLayout.Alignment.LEADING, 0, 100, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16))
                            .addGap(26, 26, 26)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(purchaseUnitQuantity2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel18)
                                .addComponent(purchaseQuantity2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel17)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(calcPurch2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(totalAmountPurchase2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbPurchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSupplierPurch2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbItemPurchase2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel18)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(purchaseUnitQuantity2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(19, 19, 19)
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(purchaseQuantity2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel16)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(AddItemPurchbtn2)
                .addGap(18, 18, 18)
                .addComponent(clearPurchase2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalAmountPurchase2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calcPurch2))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSupplierPurch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierPurch2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSupplierPurch2ActionPerformed

    private void purchaseUnitQuantity2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseUnitQuantity2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_purchaseUnitQuantity2ActionPerformed

    private void cmbItemPurchase2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemPurchase2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbItemPurchase2ActionPerformed

    private void clearPurchase2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPurchase2ActionPerformed
//        loadComboBox4();
//        loadComboBox2();
//        loadComboBox3();
//        
       
        emptyone.loadComboBox4(thisTable);

        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_clearPurchase2ActionPerformed

    private void AddItemPurchbtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemPurchbtn2ActionPerformed
        
        String purchType = cmbPurchType.getSelectedItem().toString();
        
        String orig = cmbItemPurchase2.getSelectedItem().toString();
        String splitted = orig.split(" - ")[0];
        int category = Integer.parseInt(splitted);

        int quantity = Integer.parseInt(purchaseQuantity2.getText());
        double unitPrice = Double.parseDouble(purchaseUnitQuantity2.getText());

        String origSupp = cmbSupplierPurch2.getSelectedItem().toString();
        String splittedSupp = origSupp.split(" - ")[0];
        int purOrdId = Integer.parseInt(splittedSupp);
        
        String notes = notesPurchase2.getText();
        double totalAmount = quantity * unitPrice;
        
        try {
            // Perform database updates
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement = con.createStatement();

            String query = "INSERT INTO transactions (item_id, transaction_date, quantity, transaction_type, notes) VALUES "
                    + "(" + category + ", NOW(), " + quantity + ", '" + purchType + "', '" + notes + "')";
            statement.executeUpdate(query);

            String updateQuery = purchType.equalsIgnoreCase("Stock in")
                    ? "UPDATE items SET quantity_on_hand = quantity_on_hand + " + quantity + " WHERE item_id = " + category
                    : "UPDATE items SET quantity_on_hand = quantity_on_hand - " + quantity + " WHERE item_id = " + category;

            statement.executeUpdate(updateQuery);

            // Refresh the table in EmptyOne
           
//        this.emptyone.loadComboBox4();
            

            System.out.println("Transaction processed and table updated successfully.");
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
        
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);


            // Check if we have a valid ID
            if (newPurchaseOrderId != 0) {
                System.out.println("Purchase Orders processed successfully with ID: " + newPurchaseOrderId);

                // Now, insert the PurchaseOrderItems using the newPurchaseOrderId
                String insertPurchaseOrderItemQuery = "INSERT INTO PurchaseOrderItems (item_id, quantity, unit_price, purchase_order_id) VALUES (?, ?, ?, ?)";
                PreparedStatement psPurchaseOrderItem = con.prepareStatement(insertPurchaseOrderItemQuery);

                // Set parameters for the PurchaseOrderItem
                psPurchaseOrderItem.setInt(1, category);  // item_id                            
                psPurchaseOrderItem.setInt(2, quantity);  // quantity
                psPurchaseOrderItem.setDouble(3, unitPrice);  // unit_price
                psPurchaseOrderItem.setInt(4, newPurchaseOrderId);  // purchase_order_id

                // Execute the insertion for PurchaseOrderItem
                psPurchaseOrderItem.executeUpdate();

                // Recalculate the total_amount for the specific purchase order
                String recalculateTotalAmountQuery = "SELECT SUM(quantity * unit_price) AS totalAmount FROM PurchaseOrderItems WHERE purchase_order_id = ?";
                PreparedStatement psRecalculate = con.prepareStatement(recalculateTotalAmountQuery);
                psRecalculate.setInt(1, newPurchaseOrderId);
                ResultSet resultSet = psRecalculate.executeQuery();

                double newTotalAmount = 0;
                if (resultSet.next()) {
                    newTotalAmount = resultSet.getDouble("totalAmount");
                }

                // Update the total_amount in the PurchaseOrders table
                String updateTotalAmountQuery = "UPDATE PurchaseOrders SET total_amount = ? WHERE purchase_order_id = ?";
                PreparedStatement psUpdateTotalAmount = con.prepareStatement(updateTotalAmountQuery);
                psUpdateTotalAmount.setDouble(1, newTotalAmount);
                    psUpdateTotalAmount.setInt(2, newPurchaseOrderId);
                psUpdateTotalAmount.executeUpdate();

                // Update the totalAmountPurchase text field to reflect the new total
                totalAmountPurchase2.setText(String.valueOf(newTotalAmount));

                // Refresh the relevant combo boxes
//        this.emptyone.loadComboBox4();

                System.out.println("Ordered items successfully.");
            } else {
                System.err.println("Failed to retrieve the Purchase Order ID.");
            }   
            
//        this.emptyone.loadComboBox4();
        emptyone.loadComboBox4(thisTable);

//            loadComboBox2();
//            loadComboBox3();


        } catch (Exception e) {
            System.err.println("Error second: " + e.getMessage());
        }
    //        loadComboBox4();
        emptyone.loadComboBox4(thisTable);

        // TODO add your handling code here:
    }//GEN-LAST:event_AddItemPurchbtn2ActionPerformed
    public void loadComboBox2() {

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult;
            sqlresult = statement.executeQuery("select * from suppliers");

            DefaultTableModel tableModel = new DefaultTableModel(new String[]{"Supplier", "Contact Information"}, 0);

//            Suppliertbl.setModel(tableModel);

            while (sqlresult.next()) {
                tableModel.addRow(new Object[]{sqlresult.getString("supplier_name"), sqlresult.getString("contact_info")});
//                cmbSup.addItem(sqlresult.getString("supplier_id") + " - " + sqlresult.getString("supplier_name"));
                cmbSupplierPurch2.addItem(sqlresult.getString("supplier_id") + " - " + sqlresult.getString("supplier_name"));

            }

        } catch (Exception e) {
            System.out.println("Error third: " + e.getMessage());
        }
    }

    public void loadComboBox3() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult;
            sqlresult = statement.executeQuery("select * from items");

            DefaultTableModel tableModel = new DefaultTableModel(new String[]{"Item", "Description", "Category", "Unit Price", "Quantity", "Reorder Level"}, 0);

//            Itemtbl.setModel(tableModel);

            while (sqlresult.next()) {
                tableModel.addRow(new Object[]{sqlresult.getString("item_name"), sqlresult.getString("description"), sqlresult.getString("category_id"), sqlresult.getString("unit_price"), sqlresult.getString("quantity_on_hand"), sqlresult.getString("reorder_level")});
//                cmbTrans.addItem(sqlresult.getString("item_id") + " - " + sqlresult.getString("item_name"));
                cmbItemPurchase2.addItem(sqlresult.getString("item_id") + " - " + sqlresult.getString("item_name"));

            }

        } catch (Exception e) {
            System.out.println("Error fourth: " + e.getMessage());
        }
    }

//    public void loadComboBox4() {
//try {
//    
//    
//            Class.forName("com.mysql.cj.jdbc.Driver");
//            con = DriverManager.getConnection(dburl, dbusername, dbpassword);
//
//            Statement statement;
//            statement = con.createStatement();
//            ResultSet sqlresult;
////            sqlresult = statement.executeQuery("select * from transactions ORDER BY transaction_date");
//            sqlresult = statement.executeQuery(
//                    "SELECT t.transaction_date, t.transaction_type, i.item_name, t.quantity, t.notes "
//                            + "FROM transactions t JOIN items i ON t.item_id = i.item_id "
//                            + "ORDER BY t.transaction_id DESC"
//            );
//
//            
//            DefaultTableModel tableModel = new DefaultTableModel(new String[] 
//                    {"Transaction Date", "Transaction Type", "Item", "Quantity", "Notes"}, 0)
//            
//                    {
//                            @Override
//                            public boolean isCellEditable(int row, int column) {
//                            return false;//This causes all cells to be not editable
//                        }
//                    };
//            
//            thisTable.setModel(tableModel);
//            //            
////            int holder1 = Integer.parseInt(sqlresult.getString("item_id"));
////            String holder = sqlresult.getString("Select item_name where item_id = " + holder1);
//            
//            while(sqlresult.next()) {
//                tableModel.addRow(new Object[] 
//                    {
//                    
//                    sqlresult.getString("transaction_date"), 
//                    sqlresult.getString("transaction_type"), 
//                    sqlresult.getString("item_name"), 
//                    sqlresult.getString("quantity"), 
//                    sqlresult.getString("notes")});
//            }
//            
////            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
////            TransTable.setRowSorter(sorter);
//
//            // Optionally set the initial sort order by the date column (0 index)
////            sorter.setSortKeys(List.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
//        thisTable.setAutoCreateRowSorter(false);
//         
//        } catch (Exception e) {
//            System.out.println("Error4: " + e.getMessage());
//        }
//
//    }

    private void purchaseQuantity2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseQuantity2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_purchaseQuantity2ActionPerformed

    private void totalAmountPurchase2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmountPurchase2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalAmountPurchase2ActionPerformed

    private void calcPurch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcPurch2ActionPerformed
        double quantity = Double.parseDouble(purchaseQuantity2.getText());
        double unitPrice = Double.parseDouble(purchaseUnitQuantity2.getText());
       
        double totalAmount = quantity*unitPrice;
        
        
        totalAmountPurchase2.setText(""+totalAmount);        // TODO add your handling code here:
    }//GEN-LAST:event_calcPurch2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(itemsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(itemsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(itemsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(itemsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new itemsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddItemPurchbtn2;
    private javax.swing.JButton calcPurch2;
    private javax.swing.JButton clearPurchase2;
    private javax.swing.JComboBox<String> cmbItemPurchase2;
    private javax.swing.JComboBox<String> cmbPurchType;
    private javax.swing.JComboBox<String> cmbSupplierPurch2;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextPane notesPurchase2;
    private javax.swing.JTextField purchaseQuantity2;
    private javax.swing.JTextField purchaseUnitQuantity2;
    private javax.swing.JTextField totalAmountPurchase2;
    // End of variables declaration//GEN-END:variables
}
